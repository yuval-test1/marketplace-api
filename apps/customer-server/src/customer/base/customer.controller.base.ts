/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { CustomerService } from "../customer.service";
import { CustomerService } from "../../customerService/base/CustomerService";
import { CustomerCreateInput } from "./CustomerCreateInput";
import { Customer } from "./Customer";
import { CustomerFindManyArgs } from "./CustomerFindManyArgs";
import { CustomerWhereUniqueInput } from "./CustomerWhereUniqueInput";
import { CustomerUpdateInput } from "./CustomerUpdateInput";
import { ComplaintFindManyArgs } from "../../complaint/base/ComplaintFindManyArgs";
import { Complaint } from "../../complaint/base/Complaint";
import { ComplaintWhereUniqueInput } from "../../complaint/base/ComplaintWhereUniqueInput";
import { CustomerServiceFindManyArgs } from "../../customerService/base/CustomerServiceFindManyArgs";
import { CustomerServiceWhereUniqueInput } from "../../customerService/base/CustomerServiceWhereUniqueInput";
import { RentalFindManyArgs } from "../../rental/base/RentalFindManyArgs";
import { Rental } from "../../rental/base/Rental";
import { RentalWhereUniqueInput } from "../../rental/base/RentalWhereUniqueInput";

export class CustomerControllerBase {
  constructor(protected readonly service: CustomerService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Customer })
  async createCustomer(
    @common.Body() data: CustomerCreateInput
  ): Promise<Customer> {
    return await this.service.createCustomer({
      data: data,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        email: true,
        lastName: true,
        phone: true,
        firstName: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [Customer] })
  @ApiNestedQuery(CustomerFindManyArgs)
  async customers(@common.Req() request: Request): Promise<Customer[]> {
    const args = plainToClass(CustomerFindManyArgs, request.query);
    return this.service.customers({
      ...args,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        email: true,
        lastName: true,
        phone: true,
        firstName: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Customer })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async customer(
    @common.Param() params: CustomerWhereUniqueInput
  ): Promise<Customer | null> {
    const result = await this.service.customer({
      where: params,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        email: true,
        lastName: true,
        phone: true,
        firstName: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Customer })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateCustomer(
    @common.Param() params: CustomerWhereUniqueInput,
    @common.Body() data: CustomerUpdateInput
  ): Promise<Customer | null> {
    try {
      return await this.service.updateCustomer({
        where: params,
        data: data,
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
          email: true,
          lastName: true,
          phone: true,
          firstName: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Customer })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteCustomer(
    @common.Param() params: CustomerWhereUniqueInput
  ): Promise<Customer | null> {
    try {
      return await this.service.deleteCustomer({
        where: params,
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
          email: true,
          lastName: true,
          phone: true,
          firstName: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Get("/:id/complaints")
  @ApiNestedQuery(ComplaintFindManyArgs)
  async findComplaints(
    @common.Req() request: Request,
    @common.Param() params: CustomerWhereUniqueInput
  ): Promise<Complaint[]> {
    const query = plainToClass(ComplaintFindManyArgs, request.query);
    const results = await this.service.findComplaints(params.id, {
      ...query,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        dateFiled: true,
        description: true,

        customer: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/complaints")
  async connectComplaints(
    @common.Param() params: CustomerWhereUniqueInput,
    @common.Body() body: ComplaintWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      complaints: {
        connect: body,
      },
    };
    await this.service.updateCustomer({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/complaints")
  async updateComplaints(
    @common.Param() params: CustomerWhereUniqueInput,
    @common.Body() body: ComplaintWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      complaints: {
        set: body,
      },
    };
    await this.service.updateCustomer({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/complaints")
  async disconnectComplaints(
    @common.Param() params: CustomerWhereUniqueInput,
    @common.Body() body: ComplaintWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      complaints: {
        disconnect: body,
      },
    };
    await this.service.updateCustomer({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Get("/:id/customerServices")
  @ApiNestedQuery(CustomerServiceFindManyArgs)
  async findCustomerServices(
    @common.Req() request: Request,
    @common.Param() params: CustomerWhereUniqueInput
  ): Promise<CustomerService[]> {
    const query = plainToClass(CustomerServiceFindManyArgs, request.query);
    const results = await this.service.findCustomerServices(params.id, {
      ...query,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        dateReceived: true,
        inquiryType: true,

        customer: {
          select: {
            id: true,
          },
        },

        description: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/customerServices")
  async connectCustomerServices(
    @common.Param() params: CustomerWhereUniqueInput,
    @common.Body() body: CustomerServiceWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      customerServices: {
        connect: body,
      },
    };
    await this.service.updateCustomer({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/customerServices")
  async updateCustomerServices(
    @common.Param() params: CustomerWhereUniqueInput,
    @common.Body() body: CustomerServiceWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      customerServices: {
        set: body,
      },
    };
    await this.service.updateCustomer({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/customerServices")
  async disconnectCustomerServices(
    @common.Param() params: CustomerWhereUniqueInput,
    @common.Body() body: CustomerServiceWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      customerServices: {
        disconnect: body,
      },
    };
    await this.service.updateCustomer({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Get("/:id/rentals")
  @ApiNestedQuery(RentalFindManyArgs)
  async findRentals(
    @common.Req() request: Request,
    @common.Param() params: CustomerWhereUniqueInput
  ): Promise<Rental[]> {
    const query = plainToClass(RentalFindManyArgs, request.query);
    const results = await this.service.findRentals(params.id, {
      ...query,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        startDate: true,
        branch: true,
        endDate: true,

        customer: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/rentals")
  async connectRentals(
    @common.Param() params: CustomerWhereUniqueInput,
    @common.Body() body: RentalWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      rentals: {
        connect: body,
      },
    };
    await this.service.updateCustomer({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/rentals")
  async updateRentals(
    @common.Param() params: CustomerWhereUniqueInput,
    @common.Body() body: RentalWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      rentals: {
        set: body,
      },
    };
    await this.service.updateCustomer({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/rentals")
  async disconnectRentals(
    @common.Param() params: CustomerWhereUniqueInput,
    @common.Body() body: RentalWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      rentals: {
        disconnect: body,
      },
    };
    await this.service.updateCustomer({
      where: params,
      data,
      select: { id: true },
    });
  }
}
