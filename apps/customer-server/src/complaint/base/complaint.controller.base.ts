/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { ComplaintService } from "../complaint.service";
import { ComplaintCreateInput } from "./ComplaintCreateInput";
import { Complaint } from "./Complaint";
import { ComplaintFindManyArgs } from "./ComplaintFindManyArgs";
import { ComplaintWhereUniqueInput } from "./ComplaintWhereUniqueInput";
import { ComplaintUpdateInput } from "./ComplaintUpdateInput";

export class ComplaintControllerBase {
  constructor(protected readonly service: ComplaintService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Complaint })
  async createComplaint(
    @common.Body() data: ComplaintCreateInput
  ): Promise<Complaint> {
    return await this.service.createComplaint({
      data: {
        ...data,

        customer: data.customer
          ? {
              connect: data.customer,
            }
          : undefined,
      },
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        dateFiled: true,
        description: true,

        customer: {
          select: {
            id: true,
          },
        },
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [Complaint] })
  @ApiNestedQuery(ComplaintFindManyArgs)
  async complaints(@common.Req() request: Request): Promise<Complaint[]> {
    const args = plainToClass(ComplaintFindManyArgs, request.query);
    return this.service.complaints({
      ...args,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        dateFiled: true,
        description: true,

        customer: {
          select: {
            id: true,
          },
        },
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Complaint })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async complaint(
    @common.Param() params: ComplaintWhereUniqueInput
  ): Promise<Complaint | null> {
    const result = await this.service.complaint({
      where: params,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        dateFiled: true,
        description: true,

        customer: {
          select: {
            id: true,
          },
        },
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Complaint })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateComplaint(
    @common.Param() params: ComplaintWhereUniqueInput,
    @common.Body() data: ComplaintUpdateInput
  ): Promise<Complaint | null> {
    try {
      return await this.service.updateComplaint({
        where: params,
        data: {
          ...data,

          customer: data.customer
            ? {
                connect: data.customer,
              }
            : undefined,
        },
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
          dateFiled: true,
          description: true,

          customer: {
            select: {
              id: true,
            },
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Complaint })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteComplaint(
    @common.Param() params: ComplaintWhereUniqueInput
  ): Promise<Complaint | null> {
    try {
      return await this.service.deleteComplaint({
        where: params,
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
          dateFiled: true,
          description: true,

          customer: {
            select: {
              id: true,
            },
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
