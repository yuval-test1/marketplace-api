/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  CustomerService as PrismaCustomerService,
  Customer as PrismaCustomer,
} from "@prisma/client";

export class CustomerServiceServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.CustomerServiceCountArgs, "select">
  ): Promise<number> {
    return this.prisma.customerService.count(args);
  }

  async customerServices<T extends Prisma.CustomerServiceFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.CustomerServiceFindManyArgs>
  ): Promise<PrismaCustomerService[]> {
    return this.prisma.customerService.findMany<Prisma.CustomerServiceFindManyArgs>(
      args
    );
  }
  async customerService<T extends Prisma.CustomerServiceFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.CustomerServiceFindUniqueArgs>
  ): Promise<PrismaCustomerService | null> {
    return this.prisma.customerService.findUnique(args);
  }
  async createCustomerService<T extends Prisma.CustomerServiceCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.CustomerServiceCreateArgs>
  ): Promise<PrismaCustomerService> {
    return this.prisma.customerService.create<T>(args);
  }
  async updateCustomerService<T extends Prisma.CustomerServiceUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.CustomerServiceUpdateArgs>
  ): Promise<PrismaCustomerService> {
    return this.prisma.customerService.update<T>(args);
  }
  async deleteCustomerService<T extends Prisma.CustomerServiceDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.CustomerServiceDeleteArgs>
  ): Promise<PrismaCustomerService> {
    return this.prisma.customerService.delete(args);
  }

  async getCustomer(parentId: string): Promise<PrismaCustomer | null> {
    return this.prisma.customerService
      .findUnique({
        where: { id: parentId },
      })
      .customer();
  }
}
