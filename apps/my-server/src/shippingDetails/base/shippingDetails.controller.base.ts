/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { ShippingDetailsService } from "../shippingDetails.service";
import { ShippingDetailsCreateInput } from "./ShippingDetailsCreateInput";
import { ShippingDetails } from "./ShippingDetails";
import { ShippingDetailsFindManyArgs } from "./ShippingDetailsFindManyArgs";
import { ShippingDetailsWhereUniqueInput } from "./ShippingDetailsWhereUniqueInput";
import { ShippingDetailsUpdateInput } from "./ShippingDetailsUpdateInput";

export class ShippingDetailsControllerBase {
  constructor(protected readonly service: ShippingDetailsService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: ShippingDetails })
  async createShippingDetails(
    @common.Body() data: ShippingDetailsCreateInput
  ): Promise<ShippingDetails> {
    return await this.service.createShippingDetails({
      data: data,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [ShippingDetails] })
  @ApiNestedQuery(ShippingDetailsFindManyArgs)
  async shippingDetailsItems(
    @common.Req() request: Request
  ): Promise<ShippingDetails[]> {
    const args = plainToClass(ShippingDetailsFindManyArgs, request.query);
    return this.service.shippingDetailsItems({
      ...args,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: ShippingDetails })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async shippingDetails(
    @common.Param() params: ShippingDetailsWhereUniqueInput
  ): Promise<ShippingDetails | null> {
    const result = await this.service.shippingDetails({
      where: params,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: ShippingDetails })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateShippingDetails(
    @common.Param() params: ShippingDetailsWhereUniqueInput,
    @common.Body() data: ShippingDetailsUpdateInput
  ): Promise<ShippingDetails | null> {
    try {
      return await this.service.updateShippingDetails({
        where: params,
        data: data,
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: ShippingDetails })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteShippingDetails(
    @common.Param() params: ShippingDetailsWhereUniqueInput
  ): Promise<ShippingDetails | null> {
    try {
      return await this.service.deleteShippingDetails({
        where: params,
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
