/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { MerchantService } from "../merchant.service";
import { MerchantCreateInput } from "./MerchantCreateInput";
import { Merchant } from "./Merchant";
import { MerchantFindManyArgs } from "./MerchantFindManyArgs";
import { MerchantWhereUniqueInput } from "./MerchantWhereUniqueInput";
import { MerchantUpdateInput } from "./MerchantUpdateInput";

export class MerchantControllerBase {
  constructor(protected readonly service: MerchantService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Merchant })
  async createMerchant(
    @common.Body() data: MerchantCreateInput
  ): Promise<Merchant> {
    return await this.service.createMerchant({
      data: data,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [Merchant] })
  @ApiNestedQuery(MerchantFindManyArgs)
  async merchants(@common.Req() request: Request): Promise<Merchant[]> {
    const args = plainToClass(MerchantFindManyArgs, request.query);
    return this.service.merchants({
      ...args,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Merchant })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async merchant(
    @common.Param() params: MerchantWhereUniqueInput
  ): Promise<Merchant | null> {
    const result = await this.service.merchant({
      where: params,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Merchant })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateMerchant(
    @common.Param() params: MerchantWhereUniqueInput,
    @common.Body() data: MerchantUpdateInput
  ): Promise<Merchant | null> {
    try {
      return await this.service.updateMerchant({
        where: params,
        data: data,
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Merchant })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteMerchant(
    @common.Param() params: MerchantWhereUniqueInput
  ): Promise<Merchant | null> {
    try {
      return await this.service.deleteMerchant({
        where: params,
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
