/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { CounterService } from "../counter.service";
import { CounterCreateInput } from "./CounterCreateInput";
import { Counter } from "./Counter";
import { CounterFindManyArgs } from "./CounterFindManyArgs";
import { CounterWhereUniqueInput } from "./CounterWhereUniqueInput";
import { CounterUpdateInput } from "./CounterUpdateInput";

export class CounterControllerBase {
  constructor(protected readonly service: CounterService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Counter })
  async createCounter(
    @common.Body() data: CounterCreateInput
  ): Promise<Counter> {
    return await this.service.createCounter({
      data: data,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [Counter] })
  @ApiNestedQuery(CounterFindManyArgs)
  async counters(@common.Req() request: Request): Promise<Counter[]> {
    const args = plainToClass(CounterFindManyArgs, request.query);
    return this.service.counters({
      ...args,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Counter })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async counter(
    @common.Param() params: CounterWhereUniqueInput
  ): Promise<Counter | null> {
    const result = await this.service.counter({
      where: params,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Counter })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateCounter(
    @common.Param() params: CounterWhereUniqueInput,
    @common.Body() data: CounterUpdateInput
  ): Promise<Counter | null> {
    try {
      return await this.service.updateCounter({
        where: params,
        data: data,
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Counter })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteCounter(
    @common.Param() params: CounterWhereUniqueInput
  ): Promise<Counter | null> {
    try {
      return await this.service.deleteCounter({
        where: params,
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
