/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  Employee as PrismaEmployee,
  Salary as PrismaSalary,
  Branch as PrismaBranch,
} from "@prisma/client";

export class EmployeeServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(args: Omit<Prisma.EmployeeCountArgs, "select">): Promise<number> {
    return this.prisma.employee.count(args);
  }

  async employees<T extends Prisma.EmployeeFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.EmployeeFindManyArgs>
  ): Promise<PrismaEmployee[]> {
    return this.prisma.employee.findMany<Prisma.EmployeeFindManyArgs>(args);
  }
  async employee<T extends Prisma.EmployeeFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.EmployeeFindUniqueArgs>
  ): Promise<PrismaEmployee | null> {
    return this.prisma.employee.findUnique(args);
  }
  async createEmployee<T extends Prisma.EmployeeCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.EmployeeCreateArgs>
  ): Promise<PrismaEmployee> {
    return this.prisma.employee.create<T>(args);
  }
  async updateEmployee<T extends Prisma.EmployeeUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.EmployeeUpdateArgs>
  ): Promise<PrismaEmployee> {
    return this.prisma.employee.update<T>(args);
  }
  async deleteEmployee<T extends Prisma.EmployeeDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.EmployeeDeleteArgs>
  ): Promise<PrismaEmployee> {
    return this.prisma.employee.delete(args);
  }

  async findSalaries(
    parentId: string,
    args: Prisma.SalaryFindManyArgs
  ): Promise<PrismaSalary[]> {
    return this.prisma.employee
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .salaries(args);
  }

  async getBranch(parentId: string): Promise<PrismaBranch | null> {
    return this.prisma.employee
      .findUnique({
        where: { id: parentId },
      })
      .branch();
  }
}
