/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  Branch as PrismaBranch,
  Employee as PrismaEmployee,
} from "@prisma/client";

export class BranchServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(args: Omit<Prisma.BranchCountArgs, "select">): Promise<number> {
    return this.prisma.branch.count(args);
  }

  async branches<T extends Prisma.BranchFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.BranchFindManyArgs>
  ): Promise<PrismaBranch[]> {
    return this.prisma.branch.findMany<Prisma.BranchFindManyArgs>(args);
  }
  async branch<T extends Prisma.BranchFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.BranchFindUniqueArgs>
  ): Promise<PrismaBranch | null> {
    return this.prisma.branch.findUnique(args);
  }
  async createBranch<T extends Prisma.BranchCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.BranchCreateArgs>
  ): Promise<PrismaBranch> {
    return this.prisma.branch.create<T>(args);
  }
  async updateBranch<T extends Prisma.BranchUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.BranchUpdateArgs>
  ): Promise<PrismaBranch> {
    return this.prisma.branch.update<T>(args);
  }
  async deleteBranch<T extends Prisma.BranchDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.BranchDeleteArgs>
  ): Promise<PrismaBranch> {
    return this.prisma.branch.delete(args);
  }

  async findEmployees(
    parentId: string,
    args: Prisma.EmployeeFindManyArgs
  ): Promise<PrismaEmployee[]> {
    return this.prisma.branch
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .employees(args);
  }
}
