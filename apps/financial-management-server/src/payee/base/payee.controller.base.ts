/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { PayeeService } from "../payee.service";
import { PayeeCreateInput } from "./PayeeCreateInput";
import { Payee } from "./Payee";
import { PayeeFindManyArgs } from "./PayeeFindManyArgs";
import { PayeeWhereUniqueInput } from "./PayeeWhereUniqueInput";
import { PayeeUpdateInput } from "./PayeeUpdateInput";

export class PayeeControllerBase {
  constructor(protected readonly service: PayeeService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Payee })
  async createPayee(@common.Body() data: PayeeCreateInput): Promise<Payee> {
    return await this.service.createPayee({
      data: data,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [Payee] })
  @ApiNestedQuery(PayeeFindManyArgs)
  async payees(@common.Req() request: Request): Promise<Payee[]> {
    const args = plainToClass(PayeeFindManyArgs, request.query);
    return this.service.payees({
      ...args,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Payee })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async payee(
    @common.Param() params: PayeeWhereUniqueInput
  ): Promise<Payee | null> {
    const result = await this.service.payee({
      where: params,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Payee })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updatePayee(
    @common.Param() params: PayeeWhereUniqueInput,
    @common.Body() data: PayeeUpdateInput
  ): Promise<Payee | null> {
    try {
      return await this.service.updatePayee({
        where: params,
        data: data,
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Payee })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deletePayee(
    @common.Param() params: PayeeWhereUniqueInput
  ): Promise<Payee | null> {
    try {
      return await this.service.deletePayee({
        where: params,
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
