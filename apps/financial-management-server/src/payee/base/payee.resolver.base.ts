/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { Payee } from "./Payee";
import { PayeeCountArgs } from "./PayeeCountArgs";
import { PayeeFindManyArgs } from "./PayeeFindManyArgs";
import { PayeeFindUniqueArgs } from "./PayeeFindUniqueArgs";
import { DeletePayeeArgs } from "./DeletePayeeArgs";
import { PayeeService } from "../payee.service";
@graphql.Resolver(() => Payee)
export class PayeeResolverBase {
  constructor(protected readonly service: PayeeService) {}

  async _payeesMeta(
    @graphql.Args() args: PayeeCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [Payee])
  async payees(@graphql.Args() args: PayeeFindManyArgs): Promise<Payee[]> {
    return this.service.payees(args);
  }

  @graphql.Query(() => Payee, { nullable: true })
  async payee(
    @graphql.Args() args: PayeeFindUniqueArgs
  ): Promise<Payee | null> {
    const result = await this.service.payee(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => Payee)
  async deletePayee(
    @graphql.Args() args: DeletePayeeArgs
  ): Promise<Payee | null> {
    try {
      return await this.service.deletePayee(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
