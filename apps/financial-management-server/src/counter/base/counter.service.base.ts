/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, Counter as PrismaCounter } from "@prisma/client";

export class CounterServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(args: Omit<Prisma.CounterCountArgs, "select">): Promise<number> {
    return this.prisma.counter.count(args);
  }

  async counters<T extends Prisma.CounterFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.CounterFindManyArgs>
  ): Promise<PrismaCounter[]> {
    return this.prisma.counter.findMany<Prisma.CounterFindManyArgs>(args);
  }
  async counter<T extends Prisma.CounterFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.CounterFindUniqueArgs>
  ): Promise<PrismaCounter | null> {
    return this.prisma.counter.findUnique(args);
  }
  async createCounter<T extends Prisma.CounterCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.CounterCreateArgs>
  ): Promise<PrismaCounter> {
    return this.prisma.counter.create<T>(args);
  }
  async updateCounter<T extends Prisma.CounterUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.CounterUpdateArgs>
  ): Promise<PrismaCounter> {
    return this.prisma.counter.update<T>(args);
  }
  async deleteCounter<T extends Prisma.CounterDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.CounterDeleteArgs>
  ): Promise<PrismaCounter> {
    return this.prisma.counter.delete(args);
  }
}
