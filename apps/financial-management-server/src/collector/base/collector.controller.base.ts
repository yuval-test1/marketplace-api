/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { CollectorService } from "../collector.service";
import { CollectorCreateInput } from "./CollectorCreateInput";
import { Collector } from "./Collector";
import { CollectorFindManyArgs } from "./CollectorFindManyArgs";
import { CollectorWhereUniqueInput } from "./CollectorWhereUniqueInput";
import { CollectorUpdateInput } from "./CollectorUpdateInput";

export class CollectorControllerBase {
  constructor(protected readonly service: CollectorService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Collector })
  async createCollector(
    @common.Body() data: CollectorCreateInput
  ): Promise<Collector> {
    return await this.service.createCollector({
      data: data,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [Collector] })
  @ApiNestedQuery(CollectorFindManyArgs)
  async collectors(@common.Req() request: Request): Promise<Collector[]> {
    const args = plainToClass(CollectorFindManyArgs, request.query);
    return this.service.collectors({
      ...args,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Collector })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async collector(
    @common.Param() params: CollectorWhereUniqueInput
  ): Promise<Collector | null> {
    const result = await this.service.collector({
      where: params,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Collector })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateCollector(
    @common.Param() params: CollectorWhereUniqueInput,
    @common.Body() data: CollectorUpdateInput
  ): Promise<Collector | null> {
    try {
      return await this.service.updateCollector({
        where: params,
        data: data,
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Collector })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteCollector(
    @common.Param() params: CollectorWhereUniqueInput
  ): Promise<Collector | null> {
    try {
      return await this.service.deleteCollector({
        where: params,
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
